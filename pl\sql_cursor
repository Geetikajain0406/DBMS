DELIMITER $$
create procedure largest(in a int,in b int,in c int,in d int)
begin 
declare result varchar(30);
if a>b and a>c and a>d then
set result='a is greater';
elseif b>a and b>c and b>d then
set result='b is greater';
elseif c>a and c>b and c>d then
set result='c is greater';
else
set result='d is greater';
end if;
select result;
end$$
DELIMITER ;

CALL largest(12, 99, 45, 3);

Output:
+--------------+
| result       |
+--------------+
| b is greater |
+--------------+
Ans 2
DELIMITER $$
create procedure display(in x int)
begin
declare i int default 1;
while i<=x do
select 'hello world';
set i=i+1;
end while;
end $$
DELIMITER ;


call display(4)
+-------------+
| hello world |
+-------------+
| hello world |
+-------------+
+-------------+
| hello world |
+-------------+
| hello world |
+-------------+


Ans 3
DELIMITER $$
create procedure display(in x int)
begin
declare i int default 1;
if x<1 then 
select 'x should be greater than 1';
else
while i<x+1 do
select 'hello world';
set i=i+1;
end while;
end if;
end $$
DELIMITER ;

call display(-1)


+----------------------------+
| x should be greater than 1 |
+----------------------------+


Ans 4
drop tabel AREA;
create table AREA(
RADIUS NUMBER(5), 
 AREA DECIMAL(14,2)
 );
 
begin 
for r in 1..10 loop
insert into AREA(RADIUS,AREA)
values (r,3.14*r*r);
end loop;
commit;
end;
/
select*from AREA;
RADIUS	 AREA
---------- ----------
	 1	 3.14
	 2	12.56
	 3	28.26
	 4	50.24
	 5	 78.5
	 6     113.04
	 7     153.86
	 8     200.96
	 9     254.34
	10	  314
Ans 5
drop table power;
create table power1(
n int,
sq int,
cu int);
Delimiter $$
Create procedure power2()
declare
begin
for i in 20..30 loop
insert into power1(n,sq,cu)
values(i,power(i,2),power(i,3));
end loop;
End $$
Delimiter ;
select * from power1;

N	   SQ	      CU
---------- ---------- ----------
	20	  400	    8000
	21	  441	    9261
	22	  484	   10648
	23	  529	   12167
	24	  576	   13824
	25	  625	   15625
	26	  676	   17576
	27	  729	   19683
	28	  784	   21952
	29	  841	   24389
	30	  900	   27000
Ans 7

CREATE TABLE EMPLOYEE(
    ->   SSN VARCHAR(10),
    ->   NAME VARCHAR(50),
    ->   SALARY DECIMAL(10, 2)
    -> )
    -> ;
Query OK, 0 rows affected (0.04 sec)

delimiter $$
mysql>  create procedure increase_sal(in input_ssn varchar(10))
    ->  begin
    ->  declare current_sal decimal(10,2);
    ->  select SALARY into current_sal
    ->  from EMPLOYEE
    ->  where SSN=input_ssn;
    -> if current_sal is NOT NULL THEN
    ->  select input_ssn as SSN ,current_sal as old_sal,current_sal+(current_sal *0.15) as new_salary;
    ->   else
    -> select'emp with ssn'||input_ssn||'not found' as error_message;
    -> end if;
    -> end $$
Query OK, 0 rows affected, 2 warnings (0.01 sec)

mysql> delimiter ;
mysql>   call increase_sal('101');
+---------------+
| error_message |
+---------------+
|             1 |
+---------------+
1 row in set (0.01 sec)
Ans -8
mysql> create table emp(
    -> name varchar(20),
    -> job varchar(20),
    -> eid int);
Query OK, 0 rows affected (0.03 sec)
mysql> delimiter $$
mysql>  create procedure change_job(in old_job varchar(20),in new_job varchar(20))
    ->  begin
    ->   declare up_count int default 0;
    ->   update emp
    ->  set job=new_job
    ->    where job=old_job;
    ->   set up_count = row_count();
    ->    if up_count>0 then
    ->   select concat(up_count,'emp update from',old_job,'to',new_job)as message;
    ->   else
    ->    select concat('no emp had the job title',old_job) as message;
    ->    end if;
    ->    end $$
Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> call change_job('soft','it');
+------------------------------+
| message                      |
+------------------------------+
| no emp had the job titlesoft |
+------------------------------+
1 row in set (0.01 sec)

Ans 9
mysql> create table emp1(
    -> name varchar(30),
    -> salary int,
    -> eid int);
Query OK, 0 rows affected (0.03 sec)

mysql> INSERT INTO emp1 (name, salary, eid) VALUES
    -> ('Ankit', 30000, 101),
    -> ('Riya', 40000, 102),
    -> ('Aman', 35000, 103),
    -> ('Sneha', 45000, 104),
    -> ('Rohan', 38000, 105);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> delimiter ;
mysql> delimiter $$
mysql> create procedure min_sala(in input_salary int)
    ->   begin
    ->   declare finished int default 0;
    ->    declare emp_name varchar(30);
    ->    declare emp_sal int;
    ->    declare curemp cursor for select name,salary from emp1 where salary <input_salary;
    ->   declare continue handler for not found set finished =1;
    ->   open curemp;
    ->    emp_loop:loop
    ->    fetch curemp into emp_name ,emp_sal;
    ->   if finished =1 then
    -> leave emp_loop;
    ->    end if;
    ->    select concat('name:',emp_name,'salary:',emp_sal) as output;
    ->     end loop;
    ->     close curemp;
    ->     end $$
Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> call min_sala(40000);
+------------------------+
| output                 |
+------------------------+
| name:Ankitsalary:30000 |
+------------------------+
1 row in set (0.00 sec)

+-----------------------+
| output                |
+-----------------------+
| name:Amansalary:35000 |
+-----------------------+
1 row in set (0.01 sec)

+------------------------+
| output                 |
+------------------------+
| name:Rohansalary:38000 |
+------------------------+
1 row in set (0.01 sec)

Query OK, 0 rows affected (0.05 sec)

mysql>
